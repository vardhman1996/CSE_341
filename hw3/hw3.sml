(* Vardhman Mehta 1428251 mehtav@uw.edu *)exception NoAnswerdatatype pattern = WildcardP		 | VariableP of string		 | UnitP		 | ConstantP of int		 | ConstructorP of string * pattern		 | TupleP of pattern listdatatype valu = Constant of int	      | Unit	      | Constructor of string * valu	      | Tuple of valu list(* g arguments     f1: function that takes a unit and gets an int value     f2: function that takes a string and gives an int value for the string     p : a pattern whose counts in int value needs to be found using the above functionstakes in a pattern and matches it with different patterns defined above to get an int value defined by the given functions for that pattern. *)fun g f1 f2 p =    let 	val r = g f1 f2     in	case p of	    WildcardP         => f1 ()	  | VariableP x       => f2 x	  | ConstructorP(_,p) => r p	  | TupleP ps         => List.foldl (fn (p,i) => (r p) + i) 0 ps	  | _                 => 0    end(**** for the challenge problem only ****)datatype typ = AnythingT	     | UnitT	     | IntT	     | TupleT of typ list	     | DatatypeT of string(**** you can put all your code here ****)(* Problem 1 *)val only_lowercase = List.filter (fn x => Char.isLower(String.sub(x, 0)))(* Problem 2 *)val longest_string1 = foldl (fn (x,y) => if String.size x > String.size y then x else y) ""(* Problem 3 *)val longest_string2 = foldl (fn (x,y) => if String.size x >= String.size y then x else y) ""			    fun longest_string_helper f string_list = foldl (fn (x,y) => if f(String.size(x), String.size(y)) then x else y) "" string_list(* Problem 4 *)val longest_string3 = longest_string_helper (fn (x,y) => x > y)(* Problem 4 *)val longest_string4 = longest_string_helper (fn (x,y) => x >= y)(* Problem 5 *)val longest_lowercase = longest_string3 o only_lowercase(* Problem 6 *)fun rev_string str = String.map (fn x => Char.toUpper x) ((String.implode o List.rev o String.explode) str)(* Problem 7 *)fun first_answer f list =  case list of      [] => raise  NoAnswer    | x::list' => case f(x) of		     NONE => first_answer f list'		   | SOME v => v(* Problem 8 *)fun all_answers f list =  let      fun helper (list, acc) =	case list of	    [] => SOME acc	  | x::list' => case f(x) of			    NONE => NONE			  | SOME v => helper(list', acc @ v)  in      helper(list, [])  end(* Problem 9 *)val count_wildcards = g (fn () => 1) (fn (x) => 0)(* Problem 9 *)val count_wild_and_variable_lengths = g (fn () => 1) String.size(* Problem 9 *)fun count_a_var (string, p) = g (fn () => 0) (fn (x) => if string = x then 1 else 0) p(* Problem 10 *)fun check_pat p =  let      fun helper1 p =	case p of	    VariableP string => string::[]	  | ConstructorP (_, p) => helper1(p)	  | TupleP ps => List.foldl (fn (p', x) => x @ helper1(p')) [] ps	  | _ => []      val string_list = helper1 p      fun helper2 string_list =	case string_list of	    [] => true	  | x::string_list' => (not (List.exists (fn (y) => x=y) string_list')) andalso (helper2 string_list')											      in      helper2(string_list)  end(* Problem 11 *)fun match (v, p) =  case (v, p) of      (_, WildcardP) => SOME([])    | (v, VariableP s) => SOME([(s, v)])    | (Unit, UnitP) => SOME([])    | (Constant c, ConstantP cp) => if c=cp then SOME([]) else NONE    | (Constructor (s1, v), ConstructorP (s2, p)) => if s1=s2						     then match(v, p)						     else NONE    | (Tuple vs, TupleP ps) => if List.length(vs) = List.length(ps)			       then all_answers match(ListPair.zip(vs, ps))			       else NONE    | (_, _) => NONE(* Problem 12 *)fun first_match value pat_list =  SOME(first_answer (fn (pat) => match(value, pat)) pat_list)  handle NoAnswer => NONE(* Challenge Problem *)fun pattern_to_type (list, p) =  case p of      UnitP => UnitT    | ConstantP _ => IntT    | TupleP ps => TupleT (List.map (fn x => pattern_to_type(list, x)) ps)    | ConstructorP(str, p) =>      let	  fun constructor x =            case x of                (s, _, pat) => s = str andalso (pattern_to_type(list, p) = pat orelse pattern_to_type(list, p) = AnythingT)      in	  case List.find constructor list of             SOME (_, a, _) => DatatypeT a           | NONE => raise NoAnswer      end    | _ => AnythingTfun get_lenient (t1, t2) =  if t1 = t2  then t1  else case (t1, t2) of           (_, AnythingT) => t1         | (AnythingT, _) => t2         | (TupleT pList1, TupleT pList2) => if List.length pList1 = List.length pList2				       then TupleT(List.map get_lenient (ListPair.zip(pList1, pList2)))				       else raise NoAnswer         | (_, _) => raise NoAnswerfun typecheck_patterns (list, pList) =  let      val typs = List.map (fn x => pattern_to_type(list, x)) pList                 handle NoAnswer => []  in      case typs of          [] => NONE        | x::typs' => SOME (List.foldl get_lenient x typs')                        handle NoAnswer => NONE  end